@mixin nav($type, $n, $mq: null) {
	$media-query: "";
	$mqType: "";
	// Default trigger

	#{$n}__trigger {
		position: fixed !important;
		top: 0;
		left: 0;
		z-index: 12;
		display: block;
		width: calc(#{grid(1)} + 1em);
		height: calc(#{grid(1)} + 1em);
		background-color: var(--nav-trigger-bg, transparent);
		transform: translateX(-100%);
		&::before {
			content: none;
		}
		span {
			@include menu();
		}
		&-input {
			&:checked {
				& ~ #{$n}__trigger {
					span {
						@include menu-close();
					}
				}
			}
		}
		@include min-("width", 1, 60) {
			height: 60px;
		}
		// Need to figure out a way to only invoke this when mobile class is used
		@media #{$small-only} {
			transform: translateX(0%);
		}
	}

	@if $mq != null {
		$media-query: media-query($mq);
		$mqType: "#{$type}__#{$mq}";
	} @else {
		$media-query: "only screen and (max-width: 9999px)";
		$mqType: $type;
	}

	@media #{$media-query} {
		@if ($type == "basic") {
			#{$n}--#{$mqType} {
				max-width: 100vw;
				overflow: auto;

				// Modifiers
				&[fixed] {
					position: fixed;
					top: 0;
					width: 100%;
				}

				// Elements
				#{$n}__list {
					display: flex;
				}
				#{$n}__item {
					margin: grid(0.5);
					& + #{$n}__item {
						margin-left: 0;
					}
				}
				#{$n}__link {
					display: block;
					padding: grid(0.5);
					color: currentColor;
					text-decoration: none;
				}
				#{$n}__text {
					color: currentColor;
					font-weight: 500;
					font-size: 1em;
					white-space: nowrap;
				}
			}
		} @else if ($type == "flow") {
			#{$n}--#{$mqType} {
				max-width: 100vw;
				overflow: auto;

				// Modifiers
				&[fixed] {
					position: fixed;
					top: 50%;
					left: 0;
					transform: translateY(-50%);
				}
				&#{$n}--left {
				}

				// Elements
				#{$n}__list {
					display: block;
				}
				#{$n}__item {
				}
				#{$n}__link {
					display: block;
					padding: grid(0.25 0.5);
					color: currentColor;
					text-decoration: none;
				}
				#{$n}__text {
					color: currentColor;
					font-weight: 500;
					font-size: 1em;
					white-space: nowrap;
				}
			}
		} @else if ($type == "left") {
			#{$n}--#{$mqType} {
				width: grid(5);
				height: 100vh;
				background-color: var(--menu-bg, transparent);
				overflow: auto;

				& ~ main {
					position: absolute;
					top: 0;
					left: grid(5);
					width: calc(100% - #{grid(5)});
					height: 100vh;
					overflow: auto;
					@include min-(5, 160) {
						left: 160px;
						width: calc(100% - 160px);
					}
					@include max-(5, 320) {
						left: 320px;
						width: calc(100% - 320px);
					}
				}
				// Modifiers
				&[fixed] {
					position: fixed;
					left: 0;
				}

				// Elements
				#{$n}__list {
					display: block;
				}
				#{$n}__item {
					&.has-children {
						margin-top: grid(1);
						& > #{$n}__link {
							#{$n}__text {
								font-weight: 700;
							}
						}

						&:first-child {
							margin-top: 0;
						}
					}
				}
				#{$n}__link {
					display: block;
					color: currentColor;
					text-decoration: none;
					padding: 0.5em 1em;
				}
				#{$n}__text {
					color: var(--menu-text, currentColor);
					font-weight: 500;
					font-size: 1em;
					white-space: nowrap;
				}
				@include min-("width", 5, 160);
				@include max-("width", 5, 320);
			}
		} @else if ($type == "mobile") {
			input#{$n}__trigger-input:checked {
				& ~ #{$n}--#{$mqType} {
					transform: translateX(0%);
				}
			}
			#{$n}--#{$mqType} {
				position: fixed;
				top: 0;
				z-index: 10;
				width: 100vw;
				height: 100vh;
				background-color: var(--menu-bg, color(Black, 0.75));
				color: white;
				transform: translateX(100%);
				overflow: auto;
				overflow: auto;

				// Elements
				#{$n}__list {
					position: absolute;
					top: 50%;
					left: 50%;
					display: block;
					transform: translate(-50%, -50%);
				}
				#{$n}__item {
					display: block;
				}
				#{$n}__link {
					display: block;
					color: currentColor;
					text-decoration: none;
					padding: grid(0.5 0.5);
				}
				#{$n}__text {
					display: block;
					color: currentColor;
					font-weight: 500;
					font-size: 2em;
					white-space: nowrap;
					text-align: center;
				}
			}
		}
	}
}
