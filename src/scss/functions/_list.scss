@function map-collect($maps...) {
	$collection: ();

	@each $map in $maps {
		$collection: map-merge($collection, $map);
	}
	@return $collection;
}

@function list-length($list){
	$length: 0;
	@each $item in $list{
		$length: $length + 1; 
	}
	@return $length;
}

@function list-to-str($list,$separator: ', ', $last: true){
	$string: nth($list,1);
	
	@for $i from 2 through list-length($list){
		$item: nth($list,$i);
		@if $i == list-length($list) + 1{
			$string: #{$string}#{$item};
		} @else {
			$string: #{$string}#{$separator}#{$item};
		}
	}
	@return $string; 
}


@function str-to-list($string, $separator: ".", $startAt: 1) {
	$string: str-replace($string, "__", "."); //
	$string: str-replace($string, "--", "."); //
	$string: str-replace($string, "_", "."); //

	$workStr: str-slice($string, $startAt);
	$list: ();
	$indexOfFirstSpace: str-index($workStr, $separator);
	@if $indexOfFirstSpace == null {
		$list: ($workStr);
	} @else {
		$list: (str-slice($workStr, 1, $indexOfFirstSpace - 1)); //
		$list: join(
			$list,
			str-to-list($workStr, $separator, $startAt: $indexOfFirstSpace + 1)
		);
	}
	@return $list;
}

// List Functions

@function prepend($list, $value, $seperator: space) {
	@return join($value, $list, $seperator);
}




@function to-string($list, $glue: "", $is-nested: false) {
	
	
	$result: null;

	@for $i from 1 through length($list) {
		$e: nth($list, $i);

		@if type-of($e) == list {
			$result: $result#{to-string($e, $glue, true)};
		} @else {
			$result: if($i != length($list) or $is-nested,$result$e$glue,	$result$e);
		}
	}
	@return $result;
}
@function to-list($value) {
	@return if(type-of($value) != list, ($value), $value);
}
