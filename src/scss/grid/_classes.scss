@if output(grid) {
	.#{$base-prefix-grid}row {
		max-width: #{$grid-row-width}px;
		width: 100%;
		margin: auto;
		@include createGridClasses(true);
		display: flex;
		justify-content: flex-start;
		flex-flow: row wrap;

		@if $grid-cssgrid {
			@supports (display: grid) {
				display: grid; //
				grid-template-columns: repeat($grid-columns, 1fr); //
				grid-gap: 0rem; //
			}
		}
		&.#{$base-prefix-grid}center {
			justify-items: center;
			justify-content: center;

			@if $grid-cssgrid {
				> .#{$base-prefix-grid}column {
					align-self: center;
					justify-self: center;
				}
			}
		}
		&.#{$base-prefix-grid}right {
			justify-items: right;
			justify-content: flex-end;

			@if $grid-cssgrid {
				> .#{$base-prefix-grid}column {
					align-self: right;
					justify-self: right;
				}
			}
		}
		@each $grid-name, $grid-value in $grid-breakpoints {
			// @debug $grid-name;
			&.#{$base-prefix-grid}#{$grid-name}-reverse {
				$mq: media-query(#{$grid-name}-up);
				@media #{$mq} {
					flex-direction: row-reverse;
				}
			}
		}
	}
	.#{$base-prefix-grid}column {
		@include createGridClasses(false);
	}
}
